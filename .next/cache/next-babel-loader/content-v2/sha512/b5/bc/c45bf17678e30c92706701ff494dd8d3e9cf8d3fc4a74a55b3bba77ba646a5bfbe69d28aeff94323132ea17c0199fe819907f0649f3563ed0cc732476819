{"ast":null,"code":"import connectDB from '../../../assets/utils/ConnectDB';\nimport auth from '../../../assets/middleware/auth';\nimport Users from '../../../assets/models/UserModel';\nconnectDB();\nexport default (async (req, res) => {\n  const {\n    query: {\n      id\n    },\n    method\n  } = req;\n\n  switch (req.method) {\n    case \"PATCH\":\n      await updateRole(req, res);\n      break;\n\n    case \"DELETE\":\n      await deleteUser(req, res);\n      break;\n\n    case 'GET':\n      await getUser(req, res);\n      break;\n\n    /*case 'PUT':\r\n        await modifyUser(req, res)\r\n        break;*/\n\n    case \"PUT\":\n      await uploadInfor(req, res);\n      break;\n  }\n});\n\nconst updateRole = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'master admin') return res.status(400).json({\n      err: 'Autenticação inválida'\n    });\n    const {\n      id\n    } = req.query;\n    const {\n      role\n    } = req.body;\n    const admin = req.body.role === 'admin' || req.body.role === 'master admin' ? true : false;\n    await Users.findOneAndUpdate({\n      _id: id\n    }, {\n      role,\n      admin\n    });\n    res.json({\n      msg: 'Update Success'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst deleteUser = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'master admin') return res.status(400).json({\n      err: 'Autenticação inválida'\n    });\n    const {\n      id\n    } = req.query;\n    await Users.findByIdAndDelete(id);\n    res.json({\n      msg: 'Delete Success'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst getUser = async (req, res) => {\n  try {\n    const {\n      id\n    } = req.query; //const result = await auth(req, res)\n    //if (result.role !== 'admin' && result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\n\n    const user = await Users.findById(id);\n\n    if (!user) {\n      return res.status(400).json({\n        success: false\n      });\n    }\n\n    res.status(200).json({\n      success: true,\n      data: user\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n/*const modifyUser = async (req, res) => {\r\n    try {\r\n        const { id } = req.query\r\n        \r\n        const user = await Users.findByIdAndUpdate(id, req, req.body , {\r\n            new: true,\r\n            runValidators:true\r\n        })\r\n    if (!user) {\r\n        return res.status(400).json({succes: false})\r\n\r\n    }\r\n    res.status(200).json({succes: true, data: user})\r\n    }catch(err){\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}*/\n\n\nconst uploadInfor = async (req, res) => {\n  try {\n    //const result = await auth(req, res)\n    //if (result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\n    const {\n      id\n    } = req.query;\n    const {\n      CPF,\n      CEIpassword\n    } = req.body;\n    const newUser = await Users.findOneAndUpdate({\n      _id: id\n    }, {\n      CPF,\n      CEIpassword\n    }).select(\"-password\");\n    res.json({\n      msg: 'Update Success',\n      user: {\n        CPF,\n        CEIpassword,\n        role: newUser.role,\n        name: newUser.name,\n        email: newUser.email,\n        avatar_image: newUser.avatar_image,\n        admin: newUser.admin\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/gusta/Pessoal/Mufasa/mufasa_vercel/pages/api/user/[id].js"],"names":["connectDB","auth","Users","req","res","query","id","method","updateRole","deleteUser","getUser","uploadInfor","result","role","status","json","err","body","admin","findOneAndUpdate","_id","msg","message","findByIdAndDelete","user","findById","success","data","CPF","CEIpassword","newUser","select","name","email","avatar_image"],"mappings":"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","sourcesContent":["import connectDB from '../../../assets/utils/ConnectDB'\r\nimport auth from '../../../assets/middleware/auth'\r\nimport Users from '../../../assets/models/UserModel'\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    const {\r\n        query: { id },\r\n        method\r\n    \r\n    } = req;\r\n    switch (req.method) {\r\n        case \"PATCH\":\r\n            await updateRole(req, res)\r\n            break\r\n        case \"DELETE\":\r\n            await deleteUser(req, res)\r\n            break\r\n        case 'GET':\r\n            await getUser(req, res)\r\n            break;\r\n        /*case 'PUT':\r\n            await modifyUser(req, res)\r\n            break;*/\r\n            \r\n        case \"PUT\":\r\n            await uploadInfor (req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nconst updateRole = async (req, res) => {\r\n    try {\r\n\r\n        const result = await auth(req, res)\r\n        if (result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\r\n\r\n        const { id } = req.query\r\n        const { role } = req.body\r\n        const admin = (req.body.role === 'admin' || req.body.role === 'master admin') ? true : false\r\n\r\n        await Users.findOneAndUpdate({ _id: id }, { role, admin })\r\n\r\n        res.json({ msg: 'Update Success' })\r\n\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}\r\n\r\nconst deleteUser = async (req, res) => {\r\n    try {\r\n\r\n        const result = await auth(req, res)\r\n        if (result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\r\n\r\n        const { id } = req.query\r\n\r\n        await Users.findByIdAndDelete(id)\r\n\r\n        res.json({ msg: 'Delete Success' })\r\n\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}\r\n\r\nconst getUser = async (req, res) => {\r\n    try {\r\n        const { id } = req.query\r\n\r\n        //const result = await auth(req, res)\r\n        //if (result.role !== 'admin' && result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\r\n\r\n        const user = await Users.findById(id)\r\n\r\n        if (!user) {\r\n            return res.status(400).json({success: false})\r\n    \r\n        }\r\n\r\n        res.status(200).json({success: true, data: user})\r\n    }catch(err){\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}\r\n\r\n/*const modifyUser = async (req, res) => {\r\n    try {\r\n        const { id } = req.query\r\n        \r\n        const user = await Users.findByIdAndUpdate(id, req, req.body , {\r\n            new: true,\r\n            runValidators:true\r\n        })\r\n    if (!user) {\r\n        return res.status(400).json({succes: false})\r\n\r\n    }\r\n    res.status(200).json({succes: true, data: user})\r\n    }catch(err){\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}*/\r\n\r\nconst uploadInfor = async (req, res) => {\r\n    try {\r\n\r\n        //const result = await auth(req, res)\r\n        //if (result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\r\n\r\n        const { id } = req.query\r\n        \r\n        const {CPF, CEIpassword} =req.body\r\n\r\n        const newUser = await Users.findOneAndUpdate({ _id: id }, { CPF,CEIpassword }).select(\"-password\")\r\n\r\n        res.json({ \r\n            msg: 'Update Success' ,\r\n            user:{\r\n                CPF,\r\n                CEIpassword,\r\n                role:newUser.role,\r\n                name:newUser.name,\r\n                email:newUser.email,\r\n                avatar_image:newUser.avatar_image,\r\n                admin:newUser.admin\r\n            }\r\n    \r\n    })\r\n\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}