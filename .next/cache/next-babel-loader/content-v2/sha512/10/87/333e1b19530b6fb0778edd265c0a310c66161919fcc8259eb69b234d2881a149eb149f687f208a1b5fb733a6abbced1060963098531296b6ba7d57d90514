{"ast":null,"code":"import ConnectDB from '../../../assets/utils/ConnectDB';\nimport Users from '../../../assets/models/UserModel';\nimport { createAccessToken } from '../../../assets/utils/GenerateToken';\nimport jwt from 'jsonwebtoken';\nConnectDB();\nexport default (async (req, res) => {\n  try {\n    const rf_token = req.cookies.refreshToken;\n    console.log(rf_token);\n    if (!rf_token) return res.status(400).json({\n      err: 'Por favor, faça login'\n    });\n    const result = jwt.verify(rf_token, process.env.REFRESH_TOKEN_SECRET);\n    if (!result) return res.status(400).json({\n      err: 'Seu token esta incorreto ou expirou'\n    });\n    const user = await Users.findById(result.id);\n    if (!user) return res.status(400).json({\n      err: 'Usuário não existe'\n    });\n    const accessToken = createAccessToken({\n      id: user._id\n    });\n    res.json({\n      accessToken: {\n        accessToken\n      },\n      user: {\n        email: user.email,\n        role: user.role,\n        avatar_image: user.avatar_image,\n        admin: user.admin\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/MUFASA/mufasa_vercel/pages/api/auth/accessToken.js"],"names":["ConnectDB","Users","createAccessToken","jwt","req","res","rf_token","cookies","refreshToken","console","log","status","json","err","result","verify","process","env","REFRESH_TOKEN_SECRET","user","findById","id","accessToken","_id","email","role","avatar_image","admin","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iCAAtB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAGAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,MAAI;AACA,UAAMC,QAAQ,GAAGF,GAAG,CAACG,OAAJ,CAAYC,YAA7B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,QAAI,CAACA,QAAL,EAAe,OAAOD,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AAEf,UAAMC,MAAM,GAAGX,GAAG,CAACY,MAAJ,CAAWT,QAAX,EAAqBU,OAAO,CAACC,GAAR,CAAYC,oBAAjC,CAAf;AACA,QAAI,CAACJ,MAAL,EAAa,OAAOT,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AAEb,UAAMM,IAAI,GAAG,MAAMlB,KAAK,CAACmB,QAAN,CAAeN,MAAM,CAACO,EAAtB,CAAnB;AACA,QAAI,CAACF,IAAL,EAAW,OAAOd,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AAEX,UAAMS,WAAW,GAAGpB,iBAAiB,CAAC;AAAEmB,MAAAA,EAAE,EAAEF,IAAI,CAACI;AAAX,KAAD,CAArC;AAEAlB,IAAAA,GAAG,CAACO,IAAJ,CAAS;AACLU,MAAAA,WAAW,EAAE;AACTA,QAAAA;AADS,OADR;AAILH,MAAAA,IAAI,EAAE;AACFK,QAAAA,KAAK,EAAEL,IAAI,CAACK,KADV;AAEFC,QAAAA,IAAI,EAAEN,IAAI,CAACM,IAFT;AAGFC,QAAAA,YAAY,EAAEP,IAAI,CAACO,YAHjB;AAIFC,QAAAA,KAAK,EAAER,IAAI,CAACQ;AAJV;AAJD,KAAT;AAYH,GAzBD,CAyBE,OAAOd,GAAP,EAAY;AACV,WAAOR,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAEA,GAAG,CAACe;AAAX,KAArB,CAAP;AACH;AACJ,CA7BD","sourcesContent":["import ConnectDB from '../../../assets/utils/ConnectDB'\r\nimport Users from '../../../assets/models/UserModel'\r\nimport { createAccessToken } from '../../../assets/utils/GenerateToken'\r\nimport jwt from 'jsonwebtoken'\r\n\r\n\r\nConnectDB()\r\n\r\nexport default async (req, res) => {\r\n    try {\r\n        const rf_token = req.cookies.refreshToken\r\n        console.log(rf_token)\r\n        if (!rf_token) return res.status(400).json({ err: 'Por favor, faça login' })\r\n\r\n        const result = jwt.verify(rf_token, process.env.REFRESH_TOKEN_SECRET)\r\n        if (!result) return res.status(400).json({ err: 'Seu token esta incorreto ou expirou' })\r\n\r\n        const user = await Users.findById(result.id)\r\n        if (!user) return res.status(400).json({ err: 'Usuário não existe' })\r\n\r\n        const accessToken = createAccessToken({ id: user._id })\r\n\r\n        res.json({\r\n            accessToken: {\r\n                accessToken\r\n            },\r\n            user: {\r\n                email: user.email,\r\n                role: user.role,\r\n                avatar_image: user.avatar_image,\r\n                admin: user.admin,\r\n            }\r\n        })\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}