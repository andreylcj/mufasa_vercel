{"ast":null,"code":"const baseURL = process.env.BASE_URL;\nexport const getData = async (url, token) => {\n  let res;\n\n  if (token) {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': token\n      }\n    });\n  } else {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'GET'\n    });\n  }\n\n  const data = await res.json();\n  return data;\n};\nexport const postData = async (url, post, token) => {\n  let res;\n\n  if (token) {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify(post)\n    });\n  } else {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(post)\n    });\n  }\n\n  const data = await res.json();\n  console.log(data);\n  return data;\n};\nexport const putData = async (url, post, token) => {\n  let res;\n\n  if (token) {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify(post)\n    });\n  } else {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(post)\n    });\n  }\n\n  const data = await res.json();\n  return data;\n};\nexport const patchData = async (url, post, token) => {\n  let res;\n\n  if (token) {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify(post)\n    });\n  } else {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(post)\n    });\n  }\n\n  const data = await res.json();\n  return data;\n};\nexport const deleteData = async (url, token) => {\n  let res;\n\n  if (token) {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      }\n    });\n  } else {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  const data = await res.json();\n  return data;\n};","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/MUFASA/mufasa_vercel/assets/utils/fetchData.js"],"names":["baseURL","process","env","BASE_URL","getData","url","token","res","fetch","method","headers","data","json","postData","post","body","JSON","stringify","console","log","putData","patchData","deleteData"],"mappings":"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","sourcesContent":["const baseURL = process.env.BASE_URL\r\n\r\nexport const getData = async (url, token) => {\r\n    let res\r\n    if (token) {\r\n        res = await fetch(`${baseURL}${url}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Authorization': token,\r\n            }\r\n        })\r\n    } else {\r\n        res = await fetch(`${baseURL}${url}`, {\r\n            method: 'GET',\r\n        })\r\n    }\r\n\r\n    const data = await res.json();\r\n    return data\r\n}\r\n\r\nexport const postData = async (url, post, token) => {\r\n    let res\r\n    if (token) {\r\n        res = await fetch(`${baseURL}${url}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token\r\n            },\r\n            body: JSON.stringify(post)\r\n        })\r\n    } else {\r\n        res = await fetch(`${baseURL}${url}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(post)\r\n        })\r\n    }\r\n    const data = await res.json();\r\n    console.log(data)\r\n    return data\r\n}\r\n\r\nexport const putData = async (url, post, token) => {\r\n\r\n    let res\r\n    if (token) {\r\n        res = await fetch(`${baseURL}${url}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token\r\n            },\r\n            body: JSON.stringify(post)\r\n        })\r\n    } else {\r\n        res = await fetch(`${baseURL}${url}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(post)\r\n        })\r\n    }\r\n\r\n    const data = await res.json();\r\n    return data\r\n}\r\n\r\nexport const patchData = async (url, post, token) => {\r\n\r\n    let res\r\n    if (token) {\r\n        res = await fetch(`${baseURL}${url}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token\r\n            },\r\n            body: JSON.stringify(post)\r\n        })\r\n    } else {\r\n        res = await fetch(`${baseURL}${url}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(post)\r\n        })\r\n    }\r\n\r\n    const data = await res.json();\r\n    return data\r\n}\r\n\r\nexport const deleteData = async (url, token) => {\r\n\r\n    let res\r\n    if (token) {\r\n        res = await fetch(`${baseURL}${url}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': token\r\n            }\r\n        })\r\n    } else {\r\n        res = await fetch(`${baseURL}${url}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n    }\r\n\r\n    const data = await res.json();\r\n    return data\r\n}"]},"metadata":{},"sourceType":"module"}