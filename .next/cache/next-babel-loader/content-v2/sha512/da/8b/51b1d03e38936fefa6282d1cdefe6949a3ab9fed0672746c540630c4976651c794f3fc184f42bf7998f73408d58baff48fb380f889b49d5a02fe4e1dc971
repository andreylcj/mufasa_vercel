{"ast":null,"code":"import { Router } from \"next/router\";\nconst baseURL = process.env.VERCEL_URL ? process.env.VERCEL_URL : process.env.BASE_URL ? process.env.BASE_URL : '/';\nexport const getData = async (url, token) => {\n  let res;\n\n  if (token) {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'GET',\n      headers: {\n        Authorization: token\n      }\n    });\n  } else {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'GET'\n    });\n  }\n\n  const data = await res.json();\n  return data;\n};\nexport const postData = async (url, post, token) => {\n  let res;\n\n  if (token) {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: token\n      },\n      body: JSON.stringify(post)\n    });\n  } else {\n    res = await fetch(`${baseURL}${url}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(post)\n    });\n  }\n\n  const data = await res.json();\n  return data;\n};\nexport const putData = async (url, id, post, token) => {\n  try {\n    const res = await fetch(`${baseURL}${url}${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: token\n      },\n      body: JSON.stringify(post)\n    });\n  } catch (err) {\n    console.log(err);\n  }\n\n  const data = await res.json();\n  return data;\n};\nexport const patchData = async (url, id, post, token) => {\n  const res = await fetch(`${baseURL}${url}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: token\n    },\n    body: JSON.stringify(post)\n  });\n  const data = await res.json();\n  return data;\n};\nexport const deleteData = async (url, token) => {\n  const res = await fetch(`${baseURL}${url}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: token\n    }\n  });\n  const data = await res.json();\n  return data;\n};","map":{"version":3,"sources":["C:/Users/gusta/Pessoal/Mufasa/mufasa_vercel/assets/utils/fetchData.js"],"names":["Router","baseURL","process","env","VERCEL_URL","BASE_URL","getData","url","token","res","fetch","method","headers","Authorization","data","json","postData","post","body","JSON","stringify","putData","id","err","console","log","patchData","deleteData"],"mappings":"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","sourcesContent":["import { Router } from \"next/router\";\r\n\r\nconst baseURL = process.env.VERCEL_URL ? process.env.VERCEL_URL : process.env.BASE_URL ? process.env.BASE_URL : '/';\r\n\r\nexport const getData = async (url, token) => {\r\n  let res;\r\n  if (token) {\r\n    res = await fetch(`${baseURL}${url}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: token,\r\n      },\r\n    });\r\n  } else {\r\n    res = await fetch(`${baseURL}${url}`, {\r\n      method: 'GET',\r\n    });\r\n  }\r\n\r\n  const data = await res.json();\r\n  return data;\r\n};\r\n\r\nexport const postData = async (url, post, token) => {\r\n  let res;\r\n  if (token) {\r\n    res = await fetch(`${baseURL}${url}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        Authorization: token,\r\n      },\r\n      body: JSON.stringify(post),\r\n    });\r\n  } else {\r\n    res = await fetch(`${baseURL}${url}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(post),\r\n    });\r\n  }\r\n  const data = await res.json();\r\n  return data;\r\n};\r\n\r\nexport const putData = async (url, id, post, token) => {\r\n  try {\r\n    const res = await fetch(`${baseURL}${url}${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: token,\r\n    },\r\n    body: JSON.stringify(post),\r\n  });\r\n  }catch(err){\r\n  console.log(err)\r\n  }\r\n\r\nconst data = await res.json();\r\nreturn data;\r\n}\r\n  \r\n\r\n\r\nexport const patchData = async (url,id, post, token) => {\r\n  const res = await fetch(`${baseURL}${url}`, {\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: token,\r\n    },\r\n    body: JSON.stringify(post),\r\n  });\r\n  \r\n  const data = await res.json();\r\n  return data;\r\n};\r\n\r\nexport const deleteData = async (url, token) => {\r\n  const res = await fetch(`${baseURL}${url}`, {\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      Authorization: token,\r\n    },\r\n  });\r\n\r\n  const data = await res.json();\r\n  return data;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}