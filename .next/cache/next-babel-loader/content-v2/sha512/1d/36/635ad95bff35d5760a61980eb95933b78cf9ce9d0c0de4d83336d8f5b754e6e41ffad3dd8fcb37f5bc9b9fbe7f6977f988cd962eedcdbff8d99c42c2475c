{"ast":null,"code":"import ConnectDB from '../../../assets/utils/ConnectDB';\nimport bcrypt from 'bcrypt';\nimport Users from '../../../assets/models/UserModel';\nimport { createAccessToken, createRefreshToken } from '../../../assets/utils/GenerateToken';\nConnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case 'POST':\n      await login(req, res);\n      break;\n  }\n});\n\nconst login = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await Users.findOne({\n      email\n    });\n    if (!user) return res.status(400).json({\n      emailMessage: 'Esse email não está cadastrado no sistema'\n    });\n    if (!user.admin) return res.status(400).json({\n      emailMessage: 'Esse email não é de administrador'\n    });\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({\n      passwordMessage: 'Senha incorreta'\n    });\n    const accessToken = createAccessToken({\n      id: user._id\n    });\n    const refreshToken = createRefreshToken({\n      id: user._id\n    });\n    res.json({\n      msg: 'Login Success',\n      refreshToken,\n      accessToken,\n      user: {\n        email: user.email,\n        role: user.role,\n        avatar_image: user.avatar_image,\n        admin: user.admin\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/MUFASA/mufasa_vercel/pages/api/api-bend-admin/login.js"],"names":["ConnectDB","bcrypt","Users","createAccessToken","createRefreshToken","req","res","method","login","email","password","body","user","findOne","status","json","emailMessage","admin","isMatch","compare","passwordMessage","accessToken","id","_id","refreshToken","msg","role","avatar_image","err","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iCAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,qCAAtD;AAGAJ,SAAS;AAET,gBAAe,OAAOK,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,MAAL;AACI,YAAMC,KAAK,CAACH,GAAD,EAAMC,GAAN,CAAX;AACA;AAHR;AAKH,CAND;;AAQA,MAAME,KAAK,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AAC9B,MAAI;AAEA,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBL,GAAG,CAACM,IAAhC;AAEA,UAAMC,IAAI,GAAG,MAAMV,KAAK,CAACW,OAAN,CAAc;AAAEJ,MAAAA;AAAF,KAAd,CAAnB;AACA,QAAI,CAACG,IAAL,EAAW,OAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAArB,CAAP;AAEX,QAAI,CAACJ,IAAI,CAACK,KAAV,EAAiB,OAAOX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAArB,CAAP;AAEjB,UAAME,OAAO,GAAG,MAAMjB,MAAM,CAACkB,OAAP,CAAeT,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAAtB;AACA,QAAI,CAACQ,OAAL,EAAc,OAAOZ,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEK,MAAAA,eAAe,EAAE;AAAnB,KAArB,CAAP;AAEd,UAAMC,WAAW,GAAGlB,iBAAiB,CAAC;AAAEmB,MAAAA,EAAE,EAAEV,IAAI,CAACW;AAAX,KAAD,CAArC;AACA,UAAMC,YAAY,GAAGpB,kBAAkB,CAAC;AAAEkB,MAAAA,EAAE,EAAEV,IAAI,CAACW;AAAX,KAAD,CAAvC;AAEAjB,IAAAA,GAAG,CAACS,IAAJ,CAAS;AACLU,MAAAA,GAAG,EAAE,eADA;AAELD,MAAAA,YAFK;AAGLH,MAAAA,WAHK;AAILT,MAAAA,IAAI,EAAE;AACFH,QAAAA,KAAK,EAAEG,IAAI,CAACH,KADV;AAEFiB,QAAAA,IAAI,EAAEd,IAAI,CAACc,IAFT;AAGFC,QAAAA,YAAY,EAAEf,IAAI,CAACe,YAHjB;AAIFV,QAAAA,KAAK,EAAEL,IAAI,CAACK;AAJV;AAJD,KAAT;AAYH,GA3BD,CA2BE,OAAOW,GAAP,EAAY;AACV,WAAOtB,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEa,MAAAA,GAAG,EAAEA,GAAG,CAACC;AAAX,KAArB,CAAP;AACH;AACJ,CA/BD","sourcesContent":["import ConnectDB from '../../../assets/utils/ConnectDB'\r\nimport bcrypt from 'bcrypt'\r\nimport Users from '../../../assets/models/UserModel'\r\nimport { createAccessToken, createRefreshToken } from '../../../assets/utils/GenerateToken'\r\n\r\n\r\nConnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch (req.method) {\r\n        case 'POST':\r\n            await login(req, res)\r\n            break\r\n    }\r\n}\r\n\r\nconst login = async (req, res) => {\r\n    try {\r\n\r\n        const { email, password } = req.body\r\n\r\n        const user = await Users.findOne({ email })\r\n        if (!user) return res.status(400).json({ emailMessage: 'Esse email não está cadastrado no sistema' })\r\n\r\n        if (!user.admin) return res.status(400).json({ emailMessage: 'Esse email não é de administrador' })\r\n\r\n        const isMatch = await bcrypt.compare(password, user.password)\r\n        if (!isMatch) return res.status(400).json({ passwordMessage: 'Senha incorreta' })\r\n\r\n        const accessToken = createAccessToken({ id: user._id })\r\n        const refreshToken = createRefreshToken({ id: user._id })\r\n\r\n        res.json({\r\n            msg: 'Login Success',\r\n            refreshToken,\r\n            accessToken,\r\n            user: {\r\n                email: user.email,\r\n                role: user.role,\r\n                avatar_image: user.avatar_image,\r\n                admin: user.admin,\r\n            }\r\n        })\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}