{"ast":null,"code":"import connectDB from '../../../assets/utils/ConnectDB';\nimport auth from '../../../assets/middleware/auth';\nimport Users from '../../../assets/models/UserModel';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"PATCH\":\n      await updateRole(req, res);\n      break;\n\n    case \"DELETE\":\n      await deleteUser(req, res);\n      break;\n\n    case 'GET':\n      await getUser(req, res);\n      break;\n\n    case 'PUT':\n      await modifyUser(req, res);\n      break;\n  }\n});\n\nconst updateRole = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'master admin') return res.status(400).json({\n      err: 'Autenticação inválida'\n    });\n    const {\n      id\n    } = req.query;\n    const {\n      role\n    } = req.body;\n    const admin = req.body.role === 'admin' || req.body.role === 'master admin' ? true : false;\n    await Users.findOneAndUpdate({\n      _id: id\n    }, {\n      role,\n      admin\n    });\n    res.json({\n      msg: 'Update Success'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst deleteUser = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'master admin') return res.status(400).json({\n      err: 'Autenticação inválida'\n    });\n    const {\n      id\n    } = req.query;\n    await Users.findByIdAndDelete(id);\n    res.json({\n      msg: 'Delete Success'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst getUser = async (req, res) => {\n  try {\n    const {\n      id\n    } = req.query; //const result = await auth(req, res)\n    //if (result.role !== 'admin' && result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\n\n    const user = await Users.findById(id);\n\n    if (!user) {\n      return res.status(400).json({\n        succes: false\n      });\n    }\n\n    res.status(200).json({\n      succes: true,\n      data: user\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst modifyUser = async (req, res) => {\n  try {\n    const {\n      id\n    } = req.query;\n    const user = await Users.findByIdAndUpdate(id, req, body, {\n      new: true,\n      runValidators: true\n    });\n\n    if (!user) {\n      return res.status(400).json({\n        succes: false\n      });\n    }\n\n    res.status(200).json({\n      succes: true,\n      data: user\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/gusta/Pessoal/Mufasa/mufasa_vercel/pages/api/user/[id].js"],"names":["connectDB","auth","Users","req","res","method","updateRole","deleteUser","getUser","modifyUser","result","role","status","json","err","id","query","body","admin","findOneAndUpdate","_id","msg","message","findByIdAndDelete","user","findById","succes","data","findByIdAndUpdate","new","runValidators"],"mappings":"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","sourcesContent":["import connectDB from '../../../assets/utils/ConnectDB'\r\nimport auth from '../../../assets/middleware/auth'\r\nimport Users from '../../../assets/models/UserModel'\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch (req.method) {\r\n        case \"PATCH\":\r\n            await updateRole(req, res)\r\n            break\r\n        case \"DELETE\":\r\n            await deleteUser(req, res)\r\n            break\r\n        case 'GET':\r\n            await getUser(req, res)\r\n            break;\r\n        case 'PUT':\r\n            await modifyUser(req, res)\r\n            break;\r\n    }\r\n}\r\n\r\nconst updateRole = async (req, res) => {\r\n    try {\r\n\r\n        const result = await auth(req, res)\r\n        if (result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\r\n\r\n        const { id } = req.query\r\n        const { role } = req.body\r\n        const admin = (req.body.role === 'admin' || req.body.role === 'master admin') ? true : false\r\n\r\n        await Users.findOneAndUpdate({ _id: id }, { role, admin })\r\n\r\n        res.json({ msg: 'Update Success' })\r\n\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}\r\n\r\nconst deleteUser = async (req, res) => {\r\n    try {\r\n\r\n        const result = await auth(req, res)\r\n        if (result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\r\n\r\n        const { id } = req.query\r\n\r\n        await Users.findByIdAndDelete(id)\r\n\r\n        res.json({ msg: 'Delete Success' })\r\n\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}\r\n\r\nconst getUser = async (req, res) => {\r\n    try {\r\n        const { id } = req.query\r\n\r\n        //const result = await auth(req, res)\r\n        //if (result.role !== 'admin' && result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\r\n\r\n        const user = await Users.findById(id)\r\n\r\n        if (!user) {\r\n            return res.status(400).json({succes: false})\r\n    \r\n        }\r\n\r\n        res.status(200).json({succes: true, data: user})\r\n    }catch(err){\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}\r\n\r\nconst modifyUser = async (req, res) => {\r\n    try {\r\n        const { id } = req.query\r\n\r\n        const user = await Users.findByIdAndUpdate(id, req, body, {\r\n            new: true,\r\n            runValidators:true\r\n        })\r\n    if (!user) {\r\n        return res.status(400).json({succes: false})\r\n\r\n    }\r\n    res.status(200).json({succes: true, data: user})\r\n    }catch(err){\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}