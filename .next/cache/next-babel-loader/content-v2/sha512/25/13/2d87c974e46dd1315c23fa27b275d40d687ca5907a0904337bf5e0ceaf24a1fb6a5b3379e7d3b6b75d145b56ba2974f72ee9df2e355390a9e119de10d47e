{"ast":null,"code":"/* eslint-disable consistent-return */\nimport jwt from 'jsonwebtoken';\nimport ConnectDB from '../../../assets/utils/ConnectDB';\nimport Users from '../../../assets/models/UserModel';\nimport { createAccessToken } from '../../../assets/utils/GenerateToken';\nConnectDB();\n/* eslint consistent-return: \"error\" */\n\nexport default (async (req, res) => {\n  try {\n    const rf_token = req.cookies.refreshToken;\n    if (!rf_token) return res.status(400).json({\n      err: 'Por favor, faça login'\n    });\n    const result = jwt.verify(rf_token, process.env.REFRESH_TOKEN_SECRET);\n    if (!result) return res.status(400).json({\n      err: 'Seu token esta incorreto ou expirou'\n    });\n    const user = await Users.findById(result.id);\n    if (!user) return res.status(400).json({\n      err: 'Usuário não existe'\n    });\n    const accessToken = createAccessToken({\n      id: user._id\n    });\n    res.json({\n      accessToken,\n      user: {\n        email: user.email,\n        role: user.role,\n        avatar_image: user.avatar_image,\n        admin: user.admin,\n        _id: user._id\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n});","map":{"version":3,"sources":["C:/Users/gusta/Pessoal/Mufasa/mufasa_vercel/pages/api/auth/accessToken.js"],"names":["jwt","ConnectDB","Users","createAccessToken","req","res","rf_token","cookies","refreshToken","status","json","err","result","verify","process","env","REFRESH_TOKEN_SECRET","user","findById","id","accessToken","_id","email","role","avatar_image","admin","message"],"mappings":"AAAA;AACA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AAEAF,SAAS;AAET;;AACA,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AACF,UAAMC,QAAQ,GAAGF,GAAG,CAACG,OAAJ,CAAYC,YAA7B;AACA,QAAI,CAACF,QAAL,EAAe,OAAOD,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AAEf,UAAMC,MAAM,GAAGZ,GAAG,CAACa,MAAJ,CAAWP,QAAX,EAAqBQ,OAAO,CAACC,GAAR,CAAYC,oBAAjC,CAAf;AACA,QAAI,CAACJ,MAAL,EAAa,OAAOP,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AAEb,UAAMM,IAAI,GAAG,MAAMf,KAAK,CAACgB,QAAN,CAAeN,MAAM,CAACO,EAAtB,CAAnB;AACA,QAAI,CAACF,IAAL,EAAW,OAAOZ,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AAEX,UAAMS,WAAW,GAAGjB,iBAAiB,CAAC;AAAEgB,MAAAA,EAAE,EAAEF,IAAI,CAACI;AAAX,KAAD,CAArC;AAEAhB,IAAAA,GAAG,CAACK,IAAJ,CAAS;AACPU,MAAAA,WADO;AAEPH,MAAAA,IAAI,EAAE;AACJK,QAAAA,KAAK,EAAEL,IAAI,CAACK,KADR;AAEJC,QAAAA,IAAI,EAAEN,IAAI,CAACM,IAFP;AAGJC,QAAAA,YAAY,EAAEP,IAAI,CAACO,YAHf;AAIJC,QAAAA,KAAK,EAAER,IAAI,CAACQ,KAJR;AAKJJ,QAAAA,GAAG,EAAEJ,IAAI,CAACI;AALN;AAFC,KAAT;AAUD,GAtBD,CAsBE,OAAOV,GAAP,EAAY;AACZ,WAAON,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAEA,GAAG,CAACe;AAAX,KAArB,CAAP;AACD;AACF,CA1BD","sourcesContent":["/* eslint-disable consistent-return */\r\nimport jwt from 'jsonwebtoken';\r\nimport ConnectDB from '../../../assets/utils/ConnectDB';\r\nimport Users from '../../../assets/models/UserModel';\r\nimport { createAccessToken } from '../../../assets/utils/GenerateToken';\r\n\r\nConnectDB();\r\n\r\n/* eslint consistent-return: \"error\" */\r\nexport default async (req, res) => {\r\n  try {\r\n    const rf_token = req.cookies.refreshToken;\r\n    if (!rf_token) return res.status(400).json({ err: 'Por favor, faça login' });\r\n\r\n    const result = jwt.verify(rf_token, process.env.REFRESH_TOKEN_SECRET);\r\n    if (!result) return res.status(400).json({ err: 'Seu token esta incorreto ou expirou' });\r\n\r\n    const user = await Users.findById(result.id);\r\n    if (!user) return res.status(400).json({ err: 'Usuário não existe' });\r\n\r\n    const accessToken = createAccessToken({ id: user._id });\r\n\r\n    res.json({\r\n      accessToken,\r\n      user: {\r\n        email: user.email,\r\n        role: user.role,\r\n        avatar_image: user.avatar_image,\r\n        admin: user.admin,\r\n        _id: user._id,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    return res.status(500).json({ err: err.message });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}