{"ast":null,"code":"import ConnectDB from '../../../assets/utils/ConnectDB';\nimport bcrypt from 'bcrypt';\nimport Users from '../../../assets/models/UserModel';\nimport { createAccessToken, createRefreshToken } from '../../../assets/utils/GenerateToken';\nConnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case 'POST':\n      await register(req, res);\n      break;\n  }\n});\n\nconst register = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await Users.findOne({\n      email\n    });\n    if (user) return res.status(405).json({\n      emailMessage: 'Email já cadastrado'\n    });\n    const passwordHash = await bcrypt.hash(password, 12);\n    const newUser = new Users({\n      email,\n      password: passwordHash\n    });\n    console.log(newUser);\n    await newUser.save();\n    const accessToken = createAccessToken({\n      id: newUser._id\n    });\n    const refreshToken = createRefreshToken({\n      id: newUser._id\n    });\n    res.json({\n      msg: 'Register Success',\n      refreshToken,\n      accessToken\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message,\n      status: 500\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/Andrey luiz/Desktop/MUFASA/mufasa_vercel/pages/api/auth/register.js"],"names":["ConnectDB","bcrypt","Users","createAccessToken","createRefreshToken","req","res","method","register","email","password","body","user","findOne","status","json","emailMessage","passwordHash","hash","newUser","console","log","save","accessToken","id","_id","refreshToken","msg","err","message"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,iCAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,qCAAtD;AAEAJ,SAAS;AAET,gBAAe,OAAOK,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,MAAL;AACI,YAAMC,QAAQ,CAACH,GAAD,EAAMC,GAAN,CAAd;AACA;AAHR;AAKH,CAND;;AAQA,MAAME,QAAQ,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AACA,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBL,GAAG,CAACM,IAAhC;AAEA,UAAMC,IAAI,GAAG,MAAMV,KAAK,CAACW,OAAN,CAAc;AAAEJ,MAAAA;AAAF,KAAd,CAAnB;AACA,QAAIG,IAAJ,EAAU,OAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAArB,CAAP;AAEV,UAAMC,YAAY,GAAG,MAAMhB,MAAM,CAACiB,IAAP,CAAYR,QAAZ,EAAsB,EAAtB,CAA3B;AAEA,UAAMS,OAAO,GAAG,IAAIjB,KAAJ,CAAU;AAAEO,MAAAA,KAAF;AAASC,MAAAA,QAAQ,EAAEO;AAAnB,KAAV,CAAhB;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AAEA,UAAMA,OAAO,CAACG,IAAR,EAAN;AAEA,UAAMC,WAAW,GAAGpB,iBAAiB,CAAC;AAAEqB,MAAAA,EAAE,EAAEL,OAAO,CAACM;AAAd,KAAD,CAArC;AACA,UAAMC,YAAY,GAAGtB,kBAAkB,CAAC;AAAEoB,MAAAA,EAAE,EAAEL,OAAO,CAACM;AAAd,KAAD,CAAvC;AAEAnB,IAAAA,GAAG,CAACS,IAAJ,CAAS;AACLY,MAAAA,GAAG,EAAE,kBADA;AAELD,MAAAA,YAFK;AAGLH,MAAAA;AAHK,KAAT;AAKH,GAtBD,CAsBE,OAAOK,GAAP,EAAY;AACV,WAAOtB,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEa,MAAAA,GAAG,EAAEA,GAAG,CAACC,OAAX;AAAoBf,MAAAA,MAAM,EAAE;AAA5B,KAArB,CAAP;AACH;AACJ,CA1BD","sourcesContent":["import ConnectDB from '../../../assets/utils/ConnectDB'\r\nimport bcrypt from 'bcrypt'\r\nimport Users from '../../../assets/models/UserModel'\r\nimport { createAccessToken, createRefreshToken } from '../../../assets/utils/GenerateToken'\r\n\r\nConnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch (req.method) {\r\n        case 'POST':\r\n            await register(req, res)\r\n            break\r\n    }\r\n}\r\n\r\nconst register = async (req, res) => {\r\n    try {\r\n        const { email, password } = req.body\r\n\r\n        const user = await Users.findOne({ email })\r\n        if (user) return res.status(405).json({ emailMessage: 'Email já cadastrado' })\r\n\r\n        const passwordHash = await bcrypt.hash(password, 12)\r\n\r\n        const newUser = new Users({ email, password: passwordHash })\r\n\r\n        console.log(newUser)\r\n\r\n        await newUser.save()\r\n\r\n        const accessToken = createAccessToken({ id: newUser._id })\r\n        const refreshToken = createRefreshToken({ id: newUser._id })\r\n\r\n        res.json({\r\n            msg: 'Register Success',\r\n            refreshToken,\r\n            accessToken,\r\n        })\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message, status: 500 })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}