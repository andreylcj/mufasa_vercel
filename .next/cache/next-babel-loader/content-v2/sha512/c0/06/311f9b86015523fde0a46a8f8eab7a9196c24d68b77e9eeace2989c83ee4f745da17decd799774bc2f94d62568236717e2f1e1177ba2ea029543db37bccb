{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport connectDB from '../../../assets/utils/ConnectDB';\nimport auth from '../../../assets/middleware/auth';\nimport Users from '../../../assets/models/UserModel';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"GET\":\n      await getUsers(req, res);\n      break;\n  }\n});\n\nclass APIfeatures {\n  constructor(query, queryString) {\n    this.query = query;\n    this.queryString = queryString;\n  }\n\n  filtering() {\n    const queryObj = _objectSpread({}, this.queryString);\n\n    const excludeFields = ['sort'];\n    excludeFields.forEach(el => delete queryObj[el]);\n    if (queryObj.role !== 'all' && queryObj.role) this.query.find({\n      role: queryObj.role\n    });\n    if (queryObj.search !== 'all' && queryObj.search) this.query.find({\n      email: {\n        $regex: queryObj.search\n      }\n    });\n    this.query.find();\n    return this;\n  }\n\n  sorting() {\n    if (this.queryString.sort) {\n      const sortBy = this.queryString.sort.split(',').join('');\n      this.query = this.query.sort(sortBy);\n    } else {\n      this.query = this.query.sort('-createdAt');\n    }\n\n    return this;\n  }\n\n}\n\nconst getUsers = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin' && result.role !== 'master admin') return res.status(400).json({\n      err: 'Autenticação inválida'\n    });\n    const features = new APIfeatures(Users.find().select('-password'), req.query).filtering().sorting();\n    const users = await features.query;\n    res.json({\n      users\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/gusta/Pessoal/Mufasa/mufasa_vercel/pages/api/user/index.js"],"names":["connectDB","auth","Users","req","res","method","getUsers","APIfeatures","constructor","query","queryString","filtering","queryObj","excludeFields","forEach","el","role","find","search","email","$regex","sorting","sort","sortBy","split","join","result","status","json","err","features","select","users","message"],"mappings":";;;;;;AAAA,OAAOA,SAAP,MAAsB,iCAAtB;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AAEAF,SAAS;AAET,gBAAe,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AAC/B,UAAQD,GAAG,CAACE,MAAZ;AACI,SAAK,KAAL;AACI,YAAMC,QAAQ,CAACH,GAAD,EAAMC,GAAN,CAAd;AACA;AAHR;AAKH,CAND;;AAQA,MAAMG,WAAN,CAAkB;AACdC,EAAAA,WAAW,CAACC,KAAD,EAAQC,WAAR,EAAqB;AAC5B,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACH;;AACDC,EAAAA,SAAS,GAAG;AAER,UAAMC,QAAQ,qBAAQ,KAAKF,WAAb,CAAd;;AAEA,UAAMG,aAAa,GAAG,CAAC,MAAD,CAAtB;AACAA,IAAAA,aAAa,CAACC,OAAd,CAAsBC,EAAE,IAAI,OAAQH,QAAQ,CAACG,EAAD,CAA5C;AAEA,QAAIH,QAAQ,CAACI,IAAT,KAAkB,KAAlB,IAA2BJ,QAAQ,CAACI,IAAxC,EACI,KAAKP,KAAL,CAAWQ,IAAX,CAAgB;AAAED,MAAAA,IAAI,EAAEJ,QAAQ,CAACI;AAAjB,KAAhB;AACJ,QAAIJ,QAAQ,CAACM,MAAT,KAAoB,KAApB,IAA6BN,QAAQ,CAACM,MAA1C,EACI,KAAKT,KAAL,CAAWQ,IAAX,CAAgB;AAAEE,MAAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAER,QAAQ,CAACM;AAAnB;AAAT,KAAhB;AAEJ,SAAKT,KAAL,CAAWQ,IAAX;AACA,WAAO,IAAP;AACH;;AAEDI,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKX,WAAL,CAAiBY,IAArB,EAA2B;AACvB,YAAMC,MAAM,GAAG,KAAKb,WAAL,CAAiBY,IAAjB,CAAsBE,KAAtB,CAA4B,GAA5B,EAAiCC,IAAjC,CAAsC,EAAtC,CAAf;AACA,WAAKhB,KAAL,GAAa,KAAKA,KAAL,CAAWa,IAAX,CAAgBC,MAAhB,CAAb;AACH,KAHD,MAGO;AACH,WAAKd,KAAL,GAAa,KAAKA,KAAL,CAAWa,IAAX,CAAgB,YAAhB,CAAb;AACH;;AAED,WAAO,IAAP;AACH;;AA9Ba;;AAkClB,MAAMhB,QAAQ,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AACjC,MAAI;AAEA,UAAMsB,MAAM,GAAG,MAAMzB,IAAI,CAACE,GAAD,EAAMC,GAAN,CAAzB;AACA,QAAIsB,MAAM,CAACV,IAAP,KAAgB,OAAhB,IAA2BU,MAAM,CAACV,IAAP,KAAgB,cAA/C,EAA+D,OAAOZ,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAE;AAAP,KAArB,CAAP;AAE/D,UAAMC,QAAQ,GAAG,IAAIvB,WAAJ,CAAgBL,KAAK,CAACe,IAAN,GAAac,MAAb,CAAoB,WAApB,CAAhB,EAAkD5B,GAAG,CAACM,KAAtD,EACZE,SADY,GACAU,OADA,EAAjB;AAGA,UAAMW,KAAK,GAAG,MAAMF,QAAQ,CAACrB,KAA7B;AACAL,IAAAA,GAAG,CAACwB,IAAJ,CAAS;AAAEI,MAAAA;AAAF,KAAT;AAEH,GAXD,CAWE,OAAOH,GAAP,EAAY;AACV,WAAOzB,GAAG,CAACuB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,GAAG,EAAEA,GAAG,CAACI;AAAX,KAArB,CAAP;AACH;AACJ,CAfD","sourcesContent":["import connectDB from '../../../assets/utils/ConnectDB'\r\nimport auth from '../../../assets/middleware/auth'\r\nimport Users from '../../../assets/models/UserModel'\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch (req.method) {\r\n        case \"GET\":\r\n            await getUsers(req, res)\r\n            break\r\n    }\r\n}\r\n\r\nclass APIfeatures {\r\n    constructor(query, queryString) {\r\n        this.query = query;\r\n        this.queryString = queryString;\r\n    }\r\n    filtering() {\r\n\r\n        const queryObj = { ...this.queryString }\r\n\r\n        const excludeFields = ['sort']\r\n        excludeFields.forEach(el => delete (queryObj[el]))\r\n\r\n        if (queryObj.role !== 'all' && queryObj.role)\r\n            this.query.find({ role: queryObj.role })\r\n        if (queryObj.search !== 'all' && queryObj.search)\r\n            this.query.find({ email: { $regex: queryObj.search } })\r\n\r\n        this.query.find()\r\n        return this;\r\n    }\r\n\r\n    sorting() {\r\n        if (this.queryString.sort) {\r\n            const sortBy = this.queryString.sort.split(',').join('')\r\n            this.query = this.query.sort(sortBy)\r\n        } else {\r\n            this.query = this.query.sort('-createdAt')\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\nconst getUsers = async (req, res) => {\r\n    try {\r\n\r\n        const result = await auth(req, res)\r\n        if (result.role !== 'admin' && result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\r\n\r\n        const features = new APIfeatures(Users.find().select('-password'), req.query)\r\n            .filtering().sorting()\r\n\r\n        const users = await features.query\r\n        res.json({ users })\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}