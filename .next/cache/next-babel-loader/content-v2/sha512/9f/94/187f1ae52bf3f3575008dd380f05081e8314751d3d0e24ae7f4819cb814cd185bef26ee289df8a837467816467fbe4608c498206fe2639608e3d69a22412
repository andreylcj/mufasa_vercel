{"ast":null,"code":"import connectDB from '../../../assets/utils/ConnectDB';\nimport auth from '../../../assets/middleware/auth';\nimport Users from '../../../assets/models/UserModel';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case \"PATCH\":\n      await updateRole(req, res);\n      break;\n\n    case \"DELETE\":\n      await deleteUser(req, res);\n      break;\n\n    case 'GET':\n      try {\n        const user = await Model.findById(id);\n\n        if (!user) {\n          return res.status(400).json({\n            succes: false\n          });\n        }\n\n        res.status(200).json({\n          succes: true,\n          data: user\n        });\n      } catch (error) {\n        res.status(400).json({\n          succes: false\n        });\n      }\n\n      break;\n  }\n});\n\nconst updateRole = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'master admin') return res.status(400).json({\n      err: 'Autenticação inválida'\n    });\n    const {\n      id\n    } = req.query;\n    const {\n      role\n    } = req.body;\n    const admin = req.body.role === 'admin' || req.body.role === 'master admin' ? true : false;\n    await Users.findOneAndUpdate({\n      _id: id\n    }, {\n      role,\n      admin\n    });\n    res.json({\n      msg: 'Update Success'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst deleteUser = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'master admin') return res.status(400).json({\n      err: 'Autenticação inválida'\n    });\n    const {\n      id\n    } = req.query;\n    await Users.findByIdAndDelete(id);\n    res.json({\n      msg: 'Delete Success'\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/gusta/Pessoal/Mufasa/mufasa_vercel/pages/api/user/[id].js"],"names":["connectDB","auth","Users","req","res","method","updateRole","deleteUser","user","Model","findById","id","status","json","succes","data","error","result","role","err","query","body","admin","findOneAndUpdate","_id","msg","message","findByIdAndDelete"],"mappings":"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","sourcesContent":["import connectDB from '../../../assets/utils/ConnectDB'\r\nimport auth from '../../../assets/middleware/auth'\r\nimport Users from '../../../assets/models/UserModel'\r\n\r\nconnectDB()\r\n\r\nexport default async (req, res) => {\r\n    switch (req.method) {\r\n        case \"PATCH\":\r\n            await updateRole(req, res)\r\n            break\r\n        case \"DELETE\":\r\n            await deleteUser(req, res)\r\n            break\r\n        case 'GET':\r\n            try {\r\n                const user = await Model.findById(id);\r\n\r\n                if (!user) {\r\n                    return res.status(400).json({succes: false})\r\n            \r\n                }\r\n\r\n                res.status(200).json({succes: true, data: user})\r\n            }catch(error){\r\n                res.status(400).json({succes: false})\r\n            }\r\n            break;\r\n    }\r\n}\r\n\r\nconst updateRole = async (req, res) => {\r\n    try {\r\n\r\n        const result = await auth(req, res)\r\n        if (result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\r\n\r\n        const { id } = req.query\r\n        const { role } = req.body\r\n        const admin = (req.body.role === 'admin' || req.body.role === 'master admin') ? true : false\r\n\r\n        await Users.findOneAndUpdate({ _id: id }, { role, admin })\r\n\r\n        res.json({ msg: 'Update Success' })\r\n\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}\r\n\r\nconst deleteUser = async (req, res) => {\r\n    try {\r\n\r\n        const result = await auth(req, res)\r\n        if (result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' })\r\n\r\n        const { id } = req.query\r\n\r\n        await Users.findByIdAndDelete(id)\r\n\r\n        res.json({ msg: 'Delete Success' })\r\n\r\n\r\n    } catch (err) {\r\n        return res.status(500).json({ err: err.message })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}