{"ast":null,"code":"import bcrypt from 'bcrypt';\nimport ConnectDB from '../../../assets/utils/ConnectDB';\nimport Users from '../../../assets/models/UserModel';\nimport { createAccessToken, createRefreshToken } from '../../../assets/utils/GenerateToken';\nConnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case 'POST':\n      await login(req, res);\n      break;\n\n    default:\n  }\n});\n\nconst login = async (req, res) => {\n  try {\n    const {\n      email,\n      password\n    } = req.body;\n    const user = await Users.findOne({\n      email\n    });\n    if (!user) return res.status(400).json({\n      emailMessage: 'Esse email não está cadastrado'\n    });\n    const isMatch = await bcrypt.compare(password, user.password);\n    if (!isMatch) return res.status(400).json({\n      passwordMessage: 'Senha incorreta'\n    });\n    const accessToken = createAccessToken({\n      id: user._id\n    });\n    const refreshToken = createRefreshToken({\n      id: user._id\n    });\n    res.json({\n      msg: 'Login Success',\n      refreshToken,\n      accessToken,\n      user: {\n        email: user.email,\n        role: user.role,\n        avatar_image: user.avatar_image,\n        admin: user.admin\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/gusta/Pessoal/Mufasa/mufasa_vercel/pages/api/auth/login.js"],"names":["bcrypt","ConnectDB","Users","createAccessToken","createRefreshToken","req","res","method","login","email","password","body","user","findOne","status","json","emailMessage","isMatch","compare","passwordMessage","accessToken","id","_id","refreshToken","msg","role","avatar_image","admin","err","message"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,SAASC,iBAAT,EAA4BC,kBAA5B,QAAsD,qCAAtD;AAEAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AACjC,UAAQD,GAAG,CAACE,MAAZ;AACE,SAAK,MAAL;AACE,YAAMC,KAAK,CAACH,GAAD,EAAMC,GAAN,CAAX;AACA;;AAEF;AALF;AAOD,CARD;;AAUA,MAAME,KAAK,GAAG,OAAOH,GAAP,EAAYC,GAAZ,KAAoB;AAChC,MAAI;AACF,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBL,GAAG,CAACM,IAAhC;AAEA,UAAMC,IAAI,GAAG,MAAMV,KAAK,CAACW,OAAN,CAAc;AAAEJ,MAAAA;AAAF,KAAd,CAAnB;AACA,QAAI,CAACG,IAAL,EAAW,OAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,YAAY,EAAE;AAAhB,KAArB,CAAP;AAEX,UAAMC,OAAO,GAAG,MAAMjB,MAAM,CAACkB,OAAP,CAAeR,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAAtB;AACA,QAAI,CAACO,OAAL,EAAc,OAAOX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEI,MAAAA,eAAe,EAAE;AAAnB,KAArB,CAAP;AAEd,UAAMC,WAAW,GAAGjB,iBAAiB,CAAC;AAAEkB,MAAAA,EAAE,EAAET,IAAI,CAACU;AAAX,KAAD,CAArC;AACA,UAAMC,YAAY,GAAGnB,kBAAkB,CAAC;AAAEiB,MAAAA,EAAE,EAAET,IAAI,CAACU;AAAX,KAAD,CAAvC;AAEAhB,IAAAA,GAAG,CAACS,IAAJ,CAAS;AACPS,MAAAA,GAAG,EAAE,eADE;AAEPD,MAAAA,YAFO;AAGPH,MAAAA,WAHO;AAIPR,MAAAA,IAAI,EAAE;AACJH,QAAAA,KAAK,EAAEG,IAAI,CAACH,KADR;AAEJgB,QAAAA,IAAI,EAAEb,IAAI,CAACa,IAFP;AAGJC,QAAAA,YAAY,EAAEd,IAAI,CAACc,YAHf;AAIJC,QAAAA,KAAK,EAAEf,IAAI,CAACe;AAJR;AAJC,KAAT;AAWD,GAvBD,CAuBE,OAAOC,GAAP,EAAY;AACZ,WAAOtB,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEa,MAAAA,GAAG,EAAEA,GAAG,CAACC;AAAX,KAArB,CAAP;AACD;AACF,CA3BD","sourcesContent":["import bcrypt from 'bcrypt';\r\nimport ConnectDB from '../../../assets/utils/ConnectDB';\r\nimport Users from '../../../assets/models/UserModel';\r\nimport { createAccessToken, createRefreshToken } from '../../../assets/utils/GenerateToken';\r\n\r\nConnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case 'POST':\r\n      await login(req, res);\r\n      break;\r\n\r\n    default:\r\n  }\r\n};\r\n\r\nconst login = async (req, res) => {\r\n  try {\r\n    const { email, password } = req.body;\r\n\r\n    const user = await Users.findOne({ email });\r\n    if (!user) return res.status(400).json({ emailMessage: 'Esse email não está cadastrado' });\r\n\r\n    const isMatch = await bcrypt.compare(password, user.password);\r\n    if (!isMatch) return res.status(400).json({ passwordMessage: 'Senha incorreta' });\r\n\r\n    const accessToken = createAccessToken({ id: user._id });\r\n    const refreshToken = createRefreshToken({ id: user._id });\r\n\r\n    res.json({\r\n      msg: 'Login Success',\r\n      refreshToken,\r\n      accessToken,\r\n      user: {\r\n        email: user.email,\r\n        role: user.role,\r\n        avatar_image: user.avatar_image,\r\n        admin: user.admin,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    return res.status(500).json({ err: err.message });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}