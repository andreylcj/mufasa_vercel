{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport connectDB from '../../../assets/utils/ConnectDB';\nimport auth from '../../../assets/middleware/auth';\nimport Users from '../../../assets/models/UserModel';\nconnectDB();\nexport default (async (req, res) => {\n  switch (req.method) {\n    case 'GET':\n      await getUsers(req, res);\n      break;\n\n    case 'PATCH':\n      await uploadInfo(req, res);\n      break;\n\n    default:\n  }\n});\n\nclass APIfeatures {\n  constructor(query, queryString) {\n    this.query = query;\n    this.queryString = queryString;\n  }\n\n  filtering() {\n    const queryObj = _objectSpread({}, this.queryString);\n\n    const excludeFields = ['sort'];\n    excludeFields.forEach(el => delete queryObj[el]);\n    if (queryObj.role !== 'all' && queryObj.role) this.query.find({\n      role: queryObj.role\n    });\n    if (queryObj.search !== 'all' && queryObj.search) this.query.find({\n      email: {\n        $regex: queryObj.search\n      }\n    });\n    this.query.find();\n    return this;\n  }\n\n  sorting() {\n    if (this.queryString.sort) {\n      const sortBy = this.queryString.sort.split(',').join('');\n      this.query = this.query.sort(sortBy);\n    } else {\n      this.query = this.query.sort('-createdAt');\n    }\n\n    return this;\n  }\n\n}\n\nconst getUsers = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    if (result.role !== 'admin' && result.role !== 'master admin') return res.status(400).json({\n      err: 'Autenticação inválida'\n    });\n    const features = new APIfeatures(Users.find().select('-password'), req.query).filtering().sorting();\n    const users = await features.query;\n    res.json({\n      users\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};\n\nconst uploadInfo = async (req, res) => {\n  try {\n    const result = await auth(req, res);\n    const {\n      CPF,\n      CEIpassword\n    } = req.body;\n    const newUser = await Users.findOneAndUpdate({\n      _id: result.id\n    }, {\n      CPF,\n      CEIpassword\n    }).select('-password');\n    res.json({\n      message: 'Update Success',\n      user: {\n        name: newUser.name,\n        email: newUser.email,\n        CPF,\n        CEIpassword,\n        role: newUser.role\n      }\n    });\n  } catch (err) {\n    return res.status(500).json({\n      err: err.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/gusta/Pessoal/Mufasa/mufasa_vercel/pages/api/user/index.js"],"names":["connectDB","auth","Users","req","res","method","getUsers","uploadInfo","APIfeatures","constructor","query","queryString","filtering","queryObj","excludeFields","forEach","el","role","find","search","email","$regex","sorting","sort","sortBy","split","join","result","status","json","err","features","select","users","message","CPF","CEIpassword","body","newUser","findOneAndUpdate","_id","id","user","name"],"mappings":"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","sourcesContent":["import connectDB from '../../../assets/utils/ConnectDB';\r\nimport auth from '../../../assets/middleware/auth';\r\nimport Users from '../../../assets/models/UserModel';\r\n\r\nconnectDB();\r\n\r\nexport default async (req, res) => {\r\n  switch (req.method) {\r\n    case 'GET':\r\n      await getUsers(req, res);\r\n      break;\r\n    case 'PATCH':\r\n      await uploadInfo(req, res);\r\n      break;\r\n    default:\r\n  }\r\n};\r\n\r\nclass APIfeatures {\r\n  constructor(query, queryString) {\r\n    this.query = query;\r\n    this.queryString = queryString;\r\n  }\r\n\r\n  filtering() {\r\n    const queryObj = { ...this.queryString };\r\n\r\n    const excludeFields = ['sort'];\r\n    excludeFields.forEach((el) => delete (queryObj[el]));\r\n\r\n    if (queryObj.role !== 'all' && queryObj.role) this.query.find({ role: queryObj.role });\r\n    if (queryObj.search !== 'all' && queryObj.search) this.query.find({ email: { $regex: queryObj.search } });\r\n\r\n    this.query.find();\r\n    return this;\r\n  }\r\n\r\n  sorting() {\r\n    if (this.queryString.sort) {\r\n      const sortBy = this.queryString.sort.split(',').join('');\r\n      this.query = this.query.sort(sortBy);\r\n    } else {\r\n      this.query = this.query.sort('-createdAt');\r\n    }\r\n\r\n    return this;\r\n  }\r\n}\r\n\r\nconst getUsers = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n    if (result.role !== 'admin' && result.role !== 'master admin') return res.status(400).json({ err: 'Autenticação inválida' });\r\n\r\n    const features = new APIfeatures(Users.find().select('-password'), req.query)\r\n      .filtering().sorting();\r\n\r\n    const users = await features.query;\r\n    res.json({ users });\r\n  } catch (err) {\r\n    return res.status(500).json({ err: err.message });\r\n  }\r\n};\r\n\r\nconst uploadInfo = async (req, res) => {\r\n  try {\r\n    const result = await auth(req, res);\r\n\r\n    const { CPF, CEIpassword } = req.body;\r\n\r\n    const newUser = await Users.findOneAndUpdate({ _id: result.id }, { CPF, CEIpassword }).select('-password');\r\n\r\n    res.json({\r\n      message: 'Update Success',\r\n      user: {\r\n        name: newUser.name,\r\n        email: newUser.email,\r\n        CPF,\r\n        CEIpassword,\r\n        role: newUser.role,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    return res.status(500).json({ err: err.message });\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}